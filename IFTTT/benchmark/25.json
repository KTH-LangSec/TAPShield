{
  "resource": "/IFTTT-instance",
  "path": "/IFTTT-instance",
  "httpMethod": "POST",
  "body": {
    "scriptCode":  " var sunrise = false; var localtimezone = 2; var offsettime = -0.5; var longitude = 5.9789658; var latitude = 52.2116039; var yearFirstDay = Math.floor(new Date().setFullYear(new Date().getFullYear(), 0, 1) / 86400000); var today = Math.ceil((new Date().getTime()) / 86400000); var day = today - yearFirstDay; var zenith = 90.83333333333333; var D2R = Math.PI / 180; var R2D = 180 / Math.PI; var lnHour = longitude / 15; var t; if (sunrise) { t = day + ((6 - lnHour) / 24); } else { t = day + ((18 - lnHour) / 24); }; var M = (0.9856 * t) - 3.289; var L = M + (1.916 * Math.sin(M * D2R)) + (0.020 * Math.sin(2 * M * D2R)) + 282.634; if (L > 360) { L = L - 360; } else if (L < 0) { L = L + 360; }; var RA = R2D * Math.atan(0.91764 * Math.tan(L * D2R)); if (RA > 360) { RA = RA - 360; } else if (RA < 0) { RA = RA + 360; }; var Lquadrant = (Math.floor(L / (90))) * 90; var RAquadrant = (Math.floor(RA / 90)) * 90; RA = RA + (Lquadrant - RAquadrant); RA = RA / 15; var sinDec = 0.39782 * Math.sin(L * D2R); var cosDec = Math.cos(Math.asin(sinDec)); var cosH = (Math.cos(zenith * D2R) - (sinDec * Math.sin(latitude * D2R))) / (cosDec * Math.cos(latitude * D2R)); var H; if (sunrise) { H = 360 - R2D * Math.acos(cosH) } else { H = R2D * Math.acos(cosH) }; H = H / 15; var T = H + RA - (0.06571 * t) - 6.622; var UT = T - lnHour; if (UT > 24) { UT = UT - 24; } else if (UT < 0) { UT = UT + 24; } var localT = UT + localtimezone; localT = localT + offsettime; var now = new Date(); var nd = new Date( now.getFullYear(), now.getMonth(), now.getDate() ).getTime() + ( localT * 3600 * 1000 ); var d = new Date(nd); var hours = d.getHours(); var minutes = d.getMinutes(); var m = (((minutes + 7.5)/15 | 0) * 15) % 60; var h = ((((minutes/105) + .5) | 0) + hours) % 24; var sunsetr = h+':'+m; var m2 = (((Meta.currentUserTime.minute() + 7.5)/15 | 0) * 15) % 60; var h2 = ((((Meta.currentUserTime.minute()/105) + .5) | 0) + Meta.currentUserTime.hour()) % 24; var nowr = h2+':'+m2; if (nowr != sunsetr) { Hue.turnOnAllHue.skip(); }",
    "config": {
      "currentTime": "2020-04-25T19:25:43.511Z",
      "timeZone": "GMT",
      "triggerTime": "2020-04-25T19:25:43.511Z",
      "trigger": {
        "serviceName": "TS",
        "name": "trigger",
        "ingredients": ""
      },
      "actions": [
        {
          "serviceName": "Hue",
          "name": "turnOnAllHue",
          "fields": []
        }
      ]
    }
  }
}



